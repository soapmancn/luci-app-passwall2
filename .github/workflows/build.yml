name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      target:
        description: 'OpenWrt target (matrix override)' 
        required: false
      release_tag:
        description: 'Custom release tag when manually dispatched' 
        required: false
      upstream_ref:
        description: 'Upstream passwall2 ref (tag/branch/commit); default: master'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    # Only build Qualcomm target by default; can still override via workflow_dispatch input
    strategy:
      fail-fast: false
      matrix:
        target:
          - qualcommax/ipq807x
    env:
      PACKAGE_NAME: luci-app-passwall2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Upstream luci-app-passwall2 Source
        run: |
          REF="${{ github.event.inputs.upstream_ref }}"
          if [ -z "$REF" ]; then REF="master"; fi
          echo "Cloning upstream ref: $REF"
          git clone https://github.com/xiaorouji/openwrt-passwall2 upstream-passwall2
          cd upstream-passwall2
          git fetch --depth=1 origin "$REF" || true
          git checkout "$REF" || git checkout origin/"$REF" || true
          cd ..
          # Copy the luci-app-passwall2 directory exactly (no extra nesting)
          cp -r upstream-passwall2/luci-app-passwall2 openwrt-sdk-luci-app-passwall2
          echo "Upstream luci-app-passwall2 Makefile path(s):"
          find upstream-passwall2 -maxdepth 3 -type f -name Makefile -path '*luci-app-passwall2*' -print
          echo "Copied directory contents:"
          ls -la openwrt-sdk-luci-app-passwall2/ || echo "Directory not found!"

      - name: Normalize Manual Dispatch Inputs
        id: normalize
        run: |
          if [ -n "${{ github.event.inputs.target }}" ]; then
            echo "override_target=${{ github.event.inputs.target }}" >> $GITHUB_OUTPUT
          else
            echo "override_target=${{ matrix.target }}" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "release_tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            echo "release_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential gcc-multilib g++-multilib libncurses5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip file python3 tar xz-utils zstd ca-certificates

      - name: Derive SDK Download URL
        id: sdk
        run: |
          TARGET="${{ steps.normalize.outputs.override_target }}"
          BASE_URL="https://downloads.openwrt.org/snapshots/targets"
          TARGET_PATH="$BASE_URL/$TARGET"
          echo "Listing SDK directory: $TARGET_PATH" >&2
          INDEX_HTML=$(curl -fsSL "$TARGET_PATH/") || { echo "Failed to fetch index for $TARGET_PATH" >&2; exit 1; }
          # Grep for sdk tarballs; prefer musl toolchain
          SDK_FILE=$(echo "$INDEX_HTML" | grep -oE 'openwrt-sdk-[^" ]+\.tar\.zst' | sort -u | head -n1)
          if [ -z "$SDK_FILE" ]; then
            echo "Could not auto-detect SDK filename, falling back to pattern." >&2
            SDK_FILE="openwrt-sdk-$(echo $TARGET | tr '/' '-')_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
          fi
          SDK_URL="$TARGET_PATH/$SDK_FILE"
          echo "Auto-detected SDK file: $SDK_FILE" >&2
          echo "SDK_URL=$SDK_URL" >> $GITHUB_OUTPUT
          echo "Using SDK URL: $SDK_URL"

      - name: Download and Extract OpenWrt SDK
        run: |
          set -e
          echo "Downloading SDK: ${{ steps.sdk.outputs.SDK_URL }}" >&2
          wget -q "${{ steps.sdk.outputs.SDK_URL }}" -O sdk.tar.zst
          ls -l sdk.tar.zst
          zstd -d sdk.tar.zst -o sdk.tar
          echo "Extracting tar..." >&2
          tar -tf sdk.tar | head -n20
          tar -xf sdk.tar
          rm -f sdk.tar sdk.tar.zst
          # Detect extracted directory (the first top-level entry starting with openwrt-sdk)
          SDK_DIR=$(ls -1d openwrt-sdk-* 2>/dev/null | head -n1 || true)
          if [ -z "$SDK_DIR" ]; then
            echo "ERROR: Cannot find extracted openwrt-sdk-* directory. Listing current dir:" >&2
            ls -al
            exit 1
          fi
            echo "Found SDK dir: $SDK_DIR" >&2
          mv "$SDK_DIR" openwrt-sdk
          test -d openwrt-sdk || { echo "ERROR: move failed" >&2; exit 1; }

      - name: Prepare Package Source
        run: |
          echo "Current directory contents before prepare:"
          ls -la
          echo "Verifying source directory exists:"
          ls -la openwrt-sdk-luci-app-passwall2/ || echo "Source directory missing!"
          mkdir -p openwrt-sdk/package/${{ env.PACKAGE_NAME }}
          # Copy upstream source we just cloned (flat directory)
          cp -r openwrt-sdk-luci-app-passwall2/* openwrt-sdk/package/${{ env.PACKAGE_NAME }}/
          echo "Package Makefile preview:"; head -n 40 openwrt-sdk/package/${{ env.PACKAGE_NAME }}/Makefile || true
          # Ensure Makefile really exists
          if [ ! -f openwrt-sdk/package/${{ env.PACKAGE_NAME }}/Makefile ]; then
            echo "ERROR: luci-app-passwall2 Makefile not found after copy" >&2
            exit 1
          fi

      - name: Update Feeds
        run: |
          cd openwrt-sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure Build (enable package)
        run: |
          cd openwrt-sdk
          echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" > .config
          make defconfig

      - name: Compile Package
        run: |
          cd openwrt-sdk
          make package/${{ env.PACKAGE_NAME }}/compile V=s || { echo 'First build failed, trying again (sometimes network issues)'; make package/${{ env.PACKAGE_NAME }}/compile V=s; }

      - name: Locate Built Artifact
        id: artifact
        run: |
          set -e
          PKG_PATTERN="openwrt-sdk/bin/packages/*/*/${{ env.PACKAGE_NAME }}_*"
          FILE=$(ls -1 $PKG_PATTERN 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "No package artifact found. Listing directory for debugging:" >&2
            find openwrt-sdk/bin -maxdepth 5 -type f -print
            exit 1
          fi
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "Found artifact: $FILE"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: ${{ steps.artifact.outputs.file }}
          if-no-files-found: error
      - name: Generate Release Notes
        id: notes
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: |
          echo "## Passwall2 Package ($PACKAGE_NAME)" > RELEASE.md
          echo >> RELEASE.md
          echo "Target: ${{ steps.normalize.outputs.override_target }}" >> RELEASE.md
          echo "Build Time: $(date -u '+%Y-%m-%d %H:%M UTC')" >> RELEASE.md
          echo >> RELEASE.md
          echo "### Files" >> RELEASE.md
          echo "- $(basename ${{ steps.artifact.outputs.file }})" >> RELEASE.md
          echo >> RELEASE.md
          echo "### Install" >> RELEASE.md
          echo '\nTransfer the .ipk to your router and run:' >> RELEASE.md
          echo '\n```bash' >> RELEASE.md
          echo 'opkg install $(basename ${{ steps.artifact.outputs.file }})' >> RELEASE.md
          echo '```' >> RELEASE.md
          echo >> RELEASE.md
          echo '### Source' >> RELEASE.md
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" >> RELEASE.md
          echo "notes_file=RELEASE.md" >> $GITHUB_OUTPUT

      - name: Create or Update Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.normalize.outputs.release_tag }}
          name: Release ${{ steps.normalize.outputs.release_tag }}
          body_path: ${{ steps.notes.outputs.notes_file }}
          files: ${{ steps.artifact.outputs.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
